from django.shortcuts import render

# Create your views here.
from django.shortcuts import render
from django.contrib.auth.models import User
from django.contrib.auth import authenticate
from django.contrib.auth import logout
from django.contrib.auth import login
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.cache import cache_control
from django.contrib import auth
from digispaceapp.models import *
import urllib
import smtplib
from smtplib import SMTPException


# importing mysqldb and system packages
import MySQLdb, sys
from django.db.models import Q
from django.db.models import F
from django.db import transaction
import pdb
import csv
import json
#importing exceptions
from django.db import IntegrityError

import operator
from django.db.models import Q
from datetime import date, timedelta

# HTTP Response
from django.http import HttpResponse
from django.http import HttpResponseRedirect
import string
import random


SERVER_URL = "http://52.40.205.128"   

def add_subscriber(request):
    state_list = State.objects.filter(state_status='1').order_by('state_name')
    tax_list = Tax.objects.all()

    data = {'tax_list':tax_list,'state_list':state_list}
    return render(request,'Admin/add_supplier.html',data)       

@csrf_exempt
def save_supplier(request):
	try:
	    supplier_obj = Supplier(
	    	business_name = request.POST.get('business_name'),
	    	phone_no = request.POST.get('phone_no'),
	    	secondary_phone_no = request.POST.get('sec_phone_no'),
	    	supplier_email = request.POST.get('email'),	
	    	secondary_email = request.POST.get('sec_email'),
	    	address1 = request.POST.get('address1'),
	    	address2 = request.POST.get('address2'),
	    	city = City.objects.get(city_id=request.POST.get('city')),
	    	state = State.objects.get(state_id=request.POST.get('state')),
	    	pincode = Pincode.objects.get(pincode=request.POST.get('pincode')),
	    	business_details = request.POST.get('business'),
	    	contact_person = request.POST.get('user_name'),
	    	contact_email = request.POST.get('user_email'),
	    	contact_no = request.POST.get('user_contact_no'),
	    	username = request.POST.get('user_email'),
	    	logo = request.FILES['logo'],
	    	supplier_status='1'
	    	)
	    supplier_obj.save()

	    data={
			'success':'true',
			'message':"Supplier added successfully"
		}
	except Exception, e:
		data={
			'success':'false',
			'message':str(e)
		}
	return HttpResponse(json.dumps(data),content_type='application/json')    


@csrf_exempt
def save_service(request):
	try:
		chars= string.digits
		pwdSize = 8
		password = ''.join(random.choice(chars) for _ in range(pwdSize))
		supplier_obj = Supplier.objects.get(username = request.POST.get('user_email'))
		business_obj = Business(
			category = Category.objects.get(category_name=request.POST.get('category')),
			subscription = Subscription.objects.get(subscription_name=request.POST.get('service')),
			duration = request.POST.get('selected_duration'),
			start_date = request.POST.get('duration_start_date'),
			end_date = request.POST.get('duration_end_date'),
			supplier= supplier_obj,
			transaction_code = "TID" + str(password)
		)
		business_obj.save()
		premium_service_list = request.POST.get('premium_service')
		premium_service_list = str(premium_service_list).split(',')
		no_of_days_list = request.POST.get('premium_day')
		no_of_days_list = str(no_of_days_list).split(',')
		start_date_list = request.POST.get('premium_start_date')
		start_date_list = str(start_date_list).split(',')

		end_date_list = request.POST.get('premium_end_date')
		end_date_list = str(end_date_list).split(',')
		zipped_wk = zip(premium_service_list,no_of_days_list,start_date_list,end_date_list)
		save_working_hours(zipped_wk,supplier_obj)

		data={
			'success':'true',
			'message':"Supplier added successfully",
			'transaction_code': str(business_obj.transaction_code)
		}
	except Exception, e:
		data={
			'success':'false',
			'message':str(e)
		}
	print '============data===========',data	
	return HttpResponse(json.dumps(data),content_type='application/json')

@csrf_exempt
def edit_service(request):
	try:
		print '==========request============',request.POST

		supplier_obj = Supplier.objects.get(username = request.POST.get('user_email'))
		try:		
			business_obj = Business.objects.get(supplier=supplier_obj)
			business_obj.category = Category.objects.get(category_name=request.POST.get('category')) 
			business_obj.subscription = Subscription.objects.get(subscription_name=request.POST.get('service'))
			business_obj.duration = request.POST.get('selected_duration')
			business_obj.start_date = request.POST.get('duration_start_date')
			business_obj.end_date = request.POST.get('duration_end_date')
			business_obj.save()
		except:
			chars= string.digits
			pwdSize = 8
			password = ''.join(random.choice(chars) for _ in range(pwdSize))
			business_obj = Business(
			category = Category.objects.get(category_name=request.POST.get('category')),
			subscription = Subscription.objects.get(subscription_name=request.POST.get('service')),
			duration = request.POST.get('selected_duration'),
			start_date = request.POST.get('duration_start_date'),
			end_date = request.POST.get('duration_end_date'),
			supplier= supplier_obj,
			transaction_code = "TID" + str(password)
			)
		business_obj.save()
		premium_service_obj = PremiumService.objects.filter(supplier=supplier_obj).delete()
		premium_service_list = request.POST.get('premium_service')
		premium_service_list = str(premium_service_list).split(',')
		no_of_days_list = request.POST.get('premium_day')
		no_of_days_list = str(no_of_days_list).split(',')
		start_date_list = request.POST.get('premium_start_date')
		start_date_list = str(start_date_list).split(',')
		end_date_list = request.POST.get('premium_end_date')
		end_date_list = str(end_date_list).split(',')
		zipped_wk = zip(premium_service_list,no_of_days_list,start_date_list,end_date_list)
		save_working_hours(zipped_wk,supplier_obj)
		data={
			'success':'true',
			'message':"Supplier profile edited successfully",
			'transaction_code' : str(business_obj.transaction_code)
		}
	except Exception, e:
		data={
			'success':'false',
			'message':str(e)
		}
	return HttpResponse(json.dumps(data),content_type='application/json')




def save_working_hours(zipped_wk,supplier_obj):
##    pdb.set_trace()
    print "IN SAVE WORKING HOURS"
    try:
        for wk_serv,wk_day,strt_tm,end_tm in zipped_wk:
            
            wk_obj = PremiumService(
            supplier = supplier_obj,
            premium_service_name=wk_serv,
            no_of_days=wk_day,
            start_date=strt_tm,
            end_date=end_tm,
            premium_service_status='1',
            premium_service_created_date=datetime.now(),
            premium_service_created_by="Admin",
            premium_service_updated_by="Admin",
            premium_service_updated_date=datetime.now()
            )
            wk_obj.save()
            data = {'success': 'true'}
        
    except Exception, e:
        print 'Exception ', e    
    return HttpResponse(json.dumps(data), content_type='application/json')	    

    

@csrf_exempt
def register_supplier(request):
	try:
		supplier_obj = Supplier.objects.get(username = request.POST.get('user_email'))
		chars= string.digits
		pwdSize = 8
		password = ''.join(random.choice(chars) for _ in range(pwdSize))
			

		payment_obj = PaymentDetail(
			supplier = supplier_obj,
			note = request.POST.get('note'),
			payment_mode = request.POST.get('payment_mode'),
			paid_amount = request.POST.get('paid_amount'),
			payable_amount = request.POST.get('payable_amount'),
			total_amount = request.POST.get('generated_amount'),
			tax_type = Tax.objects.get(tax_type=request.POST.get('selected_tax_type')),
			payment_code = "PMID" + str(password)
			)
		payment_obj.save()
		data={
	    'success':'true',
	    'message':"Supplier added successfully",
	    'payment_code': str(payment_obj.payment_code)
	    }
	except Exception, e:
		data={
				'success':'false',
				'message':str(e)
		}
	return HttpResponse(json.dumps(data),content_type='application/json')

@csrf_exempt
def get_amount(request):
	try:
		premium_service_list = request.POST.get('premium_service_list')
		premium_service_list = str(premium_service_list).split(',')

		premium_day = request.POST.get('premium_day')
		premium_day = str(premium_day).split(',')

		zipped_wk = zip(premium_service_list,premium_day)
		rate_card_obj = AdvertRateCard.objects.get(advert_service_name=request.POST.get('service'),duration=request.POST.get('duration'))
		final_cost = int(rate_card_obj.cost)
		for serv,day in zipped_wk:
			service_rate_card_obj = ServiceRateCard.objects.get(premium_service_name=serv,duration=day)
			final_cost = int(final_cost)+int(service_rate_card_obj.cost)

		data={
				'success':'true',
				'cost': str(final_cost)
		}
	except Exception, e:
		data={
			'success':'false',
			'message':str(e)
		}
	return HttpResponse(json.dumps(data),content_type='application/json')    

def view_subscriber_list(request):
	try:
		data = {}
		final_list = []
		try:
			user_list = Supplier.objects.filter(supplier_status='1')
			for user_obj in user_list:
				user_id = str(user_obj.supplier_id)
				business_name = user_obj.business_name
				user_name = user_obj.contact_person
				usre_email_id = user_obj.contact_email
				user_contact_no = user_obj.contact_no
				advert = '<a class="col-md-offset-2 col-md-1" id="'+str(user_id)+'"  style="text-align: center;" title="Edit" class="edit" data-toggle="modal" onclick="check_advert(this.id)" ><i class="fa fa-cart-plus"></i></a>'
				edit = '<a class="col-md-1" id="'+str(user_id)+'" title="Edit" class="edit" data-toggle="modal" href="/edit-subscriber/?user_id='+str(user_id)+'"><i class="fa fa-pencil"></i></a>'
				delete = '<a class="col-md-1" id="'+str(user_id)+'" onclick="delete_user_detail(this.id)"  title="Delete"  ><i class="fa fa-trash"></i></a>'
				actions =  advert + edit + delete
				list = {'business_name':business_name,'user_name':user_name,'actions':actions,'usre_email_id':usre_email_id,'user_contact_no':user_contact_no}
				final_list.append(list)
			data = {'success':'true','data':final_list}
		except IntegrityError as e:
			print e
			data = {'success':'false','message':'Error in  loading page. Please try after some time'}
	except MySQLdb.OperationalError, e:
		print e
	except Exception,e:
		print 'Exception ',e
	return HttpResponse(json.dumps(data), content_type='application/json')


@csrf_exempt
def delete_subscriber(request):
        try:
            user_obj = Supplier.objects.get(supplier_id=request.POST.get('user_id'))
            user_obj.supplier_status = '0'
            user_obj.save()
            data = {'message': 'User Inactivated Successfully', 'success':'true'}

        except IntegrityError as e:
          print e
        except Exception,e:
            print e
        print "Final Data: ",data
        return HttpResponse(json.dumps(data), content_type='application/json')

def edit_subscriber(request):
	state_list = State.objects.filter(state_status='1').order_by('state_name')
	tax_list = Tax.objects.all()
	subscriber_obj = Supplier.objects.get(supplier_id=request.GET.get('user_id'))
	business_name = subscriber_obj.business_name
	phone_no = subscriber_obj.phone_no
	secondary_phone_no = subscriber_obj.secondary_phone_no
	supplier_email = subscriber_obj.supplier_email
	secondary_email = subscriber_obj.secondary_email
 	display_image = SERVER_URL + subscriber_obj.logo.url
 	file_name = str(subscriber_obj.logo)[19:]

	address1 = subscriber_obj.address1
	address2 = subscriber_obj.address2
	state = subscriber_obj.state
	city_list = City.objects.filter(state_id=state,city_status='1') 
	city = subscriber_obj.city
	pincode_list = Pincode.objects.filter(city_id=city,pincode_status='1')
	pincode = subscriber_obj.pincode
	business_details = subscriber_obj.business_details
	contact_person = subscriber_obj.contact_person
	contact_no = subscriber_obj.contact_no
	contact_email = subscriber_obj.contact_email
	list1 = ''
	list1_day = 0
	list1_start_date = ''
	list1_end_date = ''
	list2 = ''
	list2_day = 0
	list2_start_date = ''
	list2_end_date = ''
	list3 = ''
	list3_day = 0
	list3_start_date = ''
	list3_end_date = ''
	list4 = ''
	list4_day = 0
	list4_start_date = ''
	list4_end_date = ''
	list5 = ''
	list5_day = 0
	list5_start_date = ''
	list5_end_date = ''
	category = ''
	duration = 0
	start_date = ''
	end_date = ''
	subscription = ''
	service_list = []
	payment_mode = ''
	note = ''
	paid_amount = ''
	payable_amount = ''
	total_amount = ''
	tax_type = '0'
	service_code = ''

	try:
		business_obj = Business.objects.get(supplier=subscriber_obj)

		category = business_obj.category.category_name
		subscription = business_obj.subscription.subscription_name
		duration = business_obj.duration	
		start_date = business_obj.start_date
		end_date = business_obj.end_date
		premium_service_list = PremiumService.objects.filter(supplier=subscriber_obj)
		
		for service in premium_service_list:
			if str(service.premium_service_name) == 'No. 1 Listing':
				list1 = service.premium_service_name
				list1_day = service.no_of_days
				list1_start_date = str(service.start_date)
				list1_end_date = str(service.end_date)
			elif service.premium_service_name == 'No. 2 Listing':
				list2 = service.premium_service_name
				list2_day = service.no_of_days
				list2_start_date = service.start_date
				list2_end_date = service.end_date
			elif service.premium_service_name == 'No. 3 Listing':
				list3 = service.premium_service_name
				list3_day = service.no_of_days
				list3_start_date = service.start_date
				list3_end_date = service.end_date
			elif service.premium_service_name == 'Advert Slider':
				list4 = service.premium_service_name
				list4_day = service.no_of_days
				list4_start_date = service.start_date
				list4_end_date = service.end_date
			else:
				list5 = service.premium_service_name
				list5_day = service.no_of_days
				list5_start_date = service.start_date
				list5_end_date = service.end_date
	except:
		pass

	try:
		payement_obj = PaymentDetail.objects.get(supplier=subscriber_obj)
		payment_mode = payement_obj.payment_mode
		note = payement_obj.note
		paid_amount = payement_obj.paid_amount
		payable_amount = payement_obj.payable_amount
		total_amount = payement_obj.total_amount
		tax_type = str(payement_obj.tax_type)
	except:
		pass	

	data = {'service_code':service_code,'file_name':file_name,'display_image':display_image,'tax_list':tax_list,'tax_type':tax_type,'payable_amount':payable_amount,'total_amount':total_amount,'paid_amount':paid_amount,'note':note,'payment_mode':payment_mode,'list1_day':list1_day,'list2_day':list2_day,'list3_day':list3_day,'list4_day':list4_day,'list5_day':list5_day,'list1':list1,'list1_start_date':list1_start_date,'list1_end_date':list1_end_date,'list2':list2,'list2_start_date':list2_start_date,'list2_end_date':list2_end_date,'list3':list3,'list3_start_date':list3_start_date,'list3_end_date':list3_end_date,'list4':list4,'list4_start_date':list4_start_date,'list4_end_date':list4_end_date,'list5':list5,'list5_start_date':list5_start_date,'list5_end_date':list5_end_date,'service_list':service_list,'end_date':end_date,'start_date':start_date,'duration':duration,'category':category,'subscription':subscription,'pincode_list':pincode_list,'city_list':city_list,'state':state,'city':city,'state_list':state_list,'contact_email':contact_email,'contact_no':contact_no,'contact_person':contact_person,'business_details':business_details,'address2':address2,'address1':address1,'secondary_email':secondary_email,'supplier_email':supplier_email,'business_name':business_name,'phone_no':phone_no,'secondary_phone_no':secondary_phone_no}
	return render(request,'Admin/edit-subscriber.html',data)   

@csrf_exempt
def update_subscriber(request):
	try:
		supplier_obj = Supplier.objects.get(username=request.POST.get('user_email'))
		supplier_obj.business_name = request.POST.get('business_name')
		supplier_obj.phone_no = request.POST.get('phone_no')
		supplier_obj.secondary_phone_no = request.POST.get('sec_phone_no')
		supplier_obj.supplier_email = request.POST.get('email')
		supplier_obj.secondary_email = request.POST.get('sec_email')
		supplier_obj.address1 = request.POST.get('address1')
		supplier_obj.address2 = request.POST.get('address2')
		supplier_obj.city = City.objects.get(city_id=request.POST.get('city'))
		supplier_obj.state = State.objects.get(state_id=request.POST.get('state'))
		supplier_obj.pincode = Pincode.objects.get(pincode=request.POST.get('pincode'))
		supplier_obj.business_details = request.POST.get('business')
		supplier_obj.contact_person = request.POST.get('user_name')
		supplier_obj.contact_email = request.POST.get('user_email')
		supplier_obj.contact_no = request.POST.get('user_contact_no')
		supplier_obj.save()
		try:
			supplier_obj.logo = request.FILES['logo']
		except:
			pass	
		data={
			'success':'true',
			'message':"Subscriber edited successfully"
		}
	except Exception, e:
		print e
		data={
			'success':'false',
			'message':str(e)
		}
	return HttpResponse(json.dumps(data),content_type='application/json') 

@csrf_exempt
def check_advert(request):
	try:
		supplier_obj = Supplier.objects.get(supplier_id=request.POST.get('user_id'))
		service_obj = Business.objects.get(supplier=supplier_obj)

		data={
			'success':'true',
			'message':"Subscriber edited successfully"
		}
	except Exception, e:
		print e
		data={
			'success':'false',
			'message':str(e)
		}
	return HttpResponse(json.dumps(data),content_type='application/json') 



@csrf_exempt
def update_subscriber_detail(request):
	try:
		print '-save n continue-----',request.POST

		supplier_obj = Supplier.objects.get(username = request.POST.get('user_email'))
		# try:
		# 	business_obj = Business.objects.get(supplier= supplier_obj)
		# 	business_obj.category = Category.objects.get(category_name=request.POST.get('category'))
		# 	business_obj.subscription = Subscription.objects.get(subscription_name=request.POST.get('service'))
		# 	business_obj.duration = request.POST.get('selected_duration')
			
		# 	# try:
		# 	# 	print '---in try----------'
		# 	# 	business_obj.start_date = datetime.strptime(request.POST.get('duration_start_date'), '%m/%d/%Y').date(),
		# 	# except Exception,e:
		# 	# 	print '=========in escept-----------'
		# 	# 	print e
		# 	# 	business_obj.start_date = request.POST.get('duration_start_date')
		# 	# try:
		# 	# 	print '--in try------------'
		# 	# 	business_obj.end_date = datetime.strptime(request.POST.get('duration_end_date'), '%m/%d/%Y').date(),
		# 	# except Exception,e:
		# 	# 	print '---------in escept----------'
		# 	# 	print e
		# 	# 	business_obj.end_date = request.POST.get('duration_end_date')
		# 	business_obj.start_date = request.POST.get('duration_start_date')
		# 	business_obj.end_date = request.POST.get('duration_end_date')

		# 	business_obj.save()
		# except:
		# 	business_obj = Business(
	 #    	category = Category.objects.get(category_name=request.POST.get('category')),
	 #    	subscription = Subscription.objects.get(subscription_name=request.POST.get('service')),
	 #    	duration = request.POST.get('selected_duration'),
	 #    	start_date =  datetime.strptime(request.POST.get('duration_start_date'), '%m/%d/%Y').date(),
	 #    	end_date = datetime.strptime(request.POST.get('duration_end_date'), '%m/%d/%Y').date(),
	 #    	supplier= supplier_obj
	 #    	)
		# 	business_obj.save()
		# premium_service_obj = PremiumService.objects.filter(supplier=supplier_obj).delete()

		# premium_service_list = request.POST.get('premium_service')
		# premium_service_list = str(premium_service_list).split(',')
		# no_of_days_list = request.POST.get('premium_day')
		# no_of_days_list = str(no_of_days_list).split(',')
		# start_date_list = request.POST.get('premium_start_date')
		# start_date_list = str(start_date_list).split(',')
		# end_date_list = request.POST.get('premium_end_date')
		# end_date_list = str(end_date_list).split(',')
		# zipped_wk = zip(premium_service_list,no_of_days_list,start_date_list,end_date_list)
		# save_working_hours(zipped_wk,supplier_obj)
		try:
			payment_obj = PaymentDetail.objects.get(supplier = supplier_obj)
			payment_obj.note = request.POST.get('note')
			payment_obj.payment_mode = request.POST.get('payment_mode')
			if(request.POST.get('paid_amount')!='None'):
				payment_obj.paid_amount = request.POST.get('paid_amount')
			else:
				payment_obj.paid_amount = ''
			payment_obj.payable_amount = request.POST.get('payable_amount')
			payment_obj.total_amount = request.POST.get('generated_amount')
			try:
				payment_obj.tax_type = Tax.objects.get(tax_type=request.POST.get('selected_tax_type'))
			except:
				pass
			payment_obj.save()
		except:
			chars= string.digits
			pwdSize = 8
			password = ''.join(random.choice(chars) for _ in range(pwdSize))
			payment_obj = PaymentDetail(
			supplier = supplier_obj,
			note = request.POST.get('note'),
			payment_mode = request.POST.get('payment_mode'),
			paid_amount = request.POST.get('paid_amount'),
			payable_amount = request.POST.get('payable_amount'),
			total_amount = request.POST.get('generated_amount'),
			tax_type = Tax.objects.get(tax_type=request.POST.get('selected_tax_type')),
			payment_code = "PMID" + str(password)
			)
			payment_obj.save()	
		data={
		'success':'true',
		'message':"Supplier added successfully",
 		'payment_code': str(payment_obj.payment_code)
		}
	except Exception, e:
		data={
				'success':'false',
				'message':str(e)
		}
	return HttpResponse(json.dumps(data),content_type='application/json')



